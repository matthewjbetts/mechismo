[% USE JSON (convert_blessed => 1); %]

<div class="oneColumn">
  <div class="column">
    <div id="chart" class="sankey contents"></div>
  </div>
</div>

<script src="/static/js/d3/sankey.js"></script>
<script>
var $j = jQuery.noConflict();

var margin = {top: 1, right: 1, bottom: 6, left: 1},
    width = $j("#chart").width() - margin.left - margin.right,
    height = $j("#chart").height() - margin.top - margin.bottom;

var formatNumber = d3.format(",.0f"),
    format = function(d) { return formatNumber(d); },
    color = d3.scale.category20();

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var sankey = d3.sankey()
    .nodeWidth(15)
    .nodePadding(10)
    .size([width, height]);

var path = sankey.link();

d3.json("/static/data/mechismo_pipeline_counts.json", function(counts) {

  sankey
      .nodes(counts.nodes)
      .links(counts.links)
      .layout(32);

  var link = svg.append("g").selectAll(".link")
      .data(counts.links)
      .enter().append("path")
      .attr("class", function(d) {return "link " + d.target.class; })
      .attr("d", path)
      .style("stroke-width", function(d) { return Math.max(1, d.dy); })
      .sort(function(a, b) { return b.dy - a.dy; });

  link.append("title")
      .text(function(d) { return d.source.name + " â†’ " + d.target.name + "\n" + format(d.value); });

  var node = svg.append("g").selectAll(".node")
      .data(counts.nodes)
      .enter().append("g")
      .attr("class", function(d) { return "node " + d.class })
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .call(d3.behavior.drag()
      .origin(function(d) { return d; })
      .on("dragstart", function() { this.parentNode.appendChild(this); })
      .on("drag", dragmove));

  node.append("rect")
      .attr("height", function(d) { return d.dy; })
      .attr("width", sankey.nodeWidth())
      //.style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
      //.style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
      //.attr("width", function(d) { return d.dy; })
      .append("title")
      .text(function(d) { return d.name + "\n" + format(d.value); });

  node.append("text")
      .attr("x", -6)
      .attr("y", function(d) { return d.dy / 2; })
      .attr("dy", ".35em")
      .attr("text-anchor", "end")
      .attr("transform", null)
      .text(function(d) { return Math.ceil(d.n / 1000) + 'k ' + d.desc; })
      .filter(function(d) { return d.x < width / 2; })
      .attr("x", 6 + sankey.nodeWidth())
      .attr("text-anchor", "start");

  /*
  // attempt to centre text on node
  node.append("text")
      .attr("dy", "1em")
      .attr("text-anchor", "end")
      .attr("transform", function(d) {return "rotate(-90)"; })
      .text(function(d) { return Math.ceil(d.n / 1000) + 'k ' + d.name; });
  */

  function dragmove(d) {
    d3.select(this).attr("transform",
      "translate(" + (
        d.x = Math.max(0, Math.min(width - d.dx, d3.event.x))
      ) + "," + (
        d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))
      ) + ")");
    sankey.relayout();
    link.attr("d", path);
  }
});

</script>
